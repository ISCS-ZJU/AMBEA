// Copyright 2006-2014 Yun Zhang 
// Department of Computer Science
// University of Tennessee
//
// This file is part of MBEA.                  
//
// MBEA is free software: you can redistribute it and/or modify      
// it under the terms of the GNU General Public License as published by   
// the Free Software Foundation, either version 3 of the License, or   
// (at your option) any later version.   
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of   
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   
// GNU General Public License for more details.   
//
// You should have received a copy of the GNU General Public License   
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/* Readme File for Biclique Enumeration in Bipartite Graphs */
/* Author: Yun Zhang  */
/* Computer Science Departement, University of Tennessee */
/* Bioscience Division, Oak Ridge National Laboratory */

Q. What does this package contain?
A. This package includes the following source files:
bigraph.h        : defines data structure and APIs for bipartite graphs
bigraph.c        : implements the functions defined in bigraph.h
biclique.h       : defines APIs for biclique enumeration
biclique.c       : implements functions for enumerating bicliques
mbea-driver.c    : the driver file containing the main function
Makefile         : the make file you can use to compile the code
README           : this file  
utility.h        : defines APIs for some utility functions
utility.c        : implements the functions defined in utility.h

and three sample files:
sample_input.txt          : sample input graph file
sample_output.txt         : sample output biclique file
sample_output.txt.profile : sample output profile file

and one executable file:
mbea  : compiled in LINUX 

Q. What platform does the code require?
The code was developed and tested on the Ubuntu Linux 12.04 x64
operating system. It should compile on any Linux system with
little or no modification of the source code.

Q. How to compile the code?
A. It's simple. You can compile the code by command line:
./make
and clean up by:
./make clean

Q. How to run the code?
A. You can run the code by command line:
./mbea Inputfile
which will enumerate bicliques and output the profile of maximal
bicliques to STDOUT.

You can also specify options to customize the output.
For example, command line:
./mbea Inputfile -p
will print out the list of maximal bicliques and the profile to STDOUT;

./mbea Inputfile -p -o Outputfile
will print out the list of maximal bicliques to file "Outputfile" 
and print the profile to "Outputfile.profile";

./mbea Inputfile -l 3
will enumerate maximal bicliques with greater than or equal to 3 left nodes;

./mbea Inputfile -r 5
will enumerate maximal bicliques with greater than or equal to 5 right nodes;

You can find the options by command line:
./mbea


Q. What's the input format and output format?
A. Basically, the input file should be an edge list of a bipartite graph,
and there are two output files, the profile of maximal bicliques as one
and the list of maximal bicliques as the other. You can find a sample
input file in this package.

Input file format:
m	n	e	// the first line should specify the number of left nodes (m), 
            // the number right nodes (n) and the number of edges (e)
u1	v1		// starting from the second line should be the left and right 
            // nodes of an edge
u1	v2
...

Notes:
- Each line in the input file should be tab or space delimited.
- The input file has to have the two sets of nodes seperated. You can't
  have nodes in one set appearing sometimes on left, sometimes on right.
- You can have any kind of node labels you want as long as you don't have 
  spaces in them.
- The code would be faster if you put the smaller vertex set as the 
  right nodes. In another word, try to make (m > n) if possible.

Output file formats:
(1) the profile file contains two parts:
   - first part lists the number of maximal biclique of each size;
   - secend part shows the size of the input bigraph, the number of edges, 
     the total number of maximal bicliques, the size of vertex/edge maximum biclique.

(2) the biclique file contains the maximal biclique found, where each line
    is a maximal biclique with their members tab-delimited.


